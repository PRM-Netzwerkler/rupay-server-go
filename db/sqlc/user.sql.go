// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user.sql

package db

import (
	"context"

	null "github.com/guregu/null/v5"
)

const createUser = `-- name: CreateUser :one
INSERT INTO resident (
    "name",
    code
) VALUES (
    $1, $2
) RETURNING name, code
`

type CreateUserParams struct {
	Name string `json:"name"`
	Code string `json:"code"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (Resident, error) {
	row := q.queryRow(ctx, q.createUserStmt, createUser, arg.Name, arg.Code)
	var i Resident
	err := row.Scan(&i.Name, &i.Code)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM resident
WHERE name = $1
`

func (q *Queries) DeleteUser(ctx context.Context, name string) error {
	_, err := q.exec(ctx, q.deleteUserStmt, deleteUser, name)
	return err
}

const getUserByCode = `-- name: GetUserByCode :one
SELECT name, code FROM resident
WHERE code = $1 LIMIT 1
`

func (q *Queries) GetUserByCode(ctx context.Context, code string) (Resident, error) {
	row := q.queryRow(ctx, q.getUserByCodeStmt, getUserByCode, code)
	var i Resident
	err := row.Scan(&i.Name, &i.Code)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT name, code FROM resident
WHERE name = $1 LIMIT 1
`

func (q *Queries) GetUserById(ctx context.Context, name string) (Resident, error) {
	row := q.queryRow(ctx, q.getUserByIdStmt, getUserById, name)
	var i Resident
	err := row.Scan(&i.Name, &i.Code)
	return i, err
}

const getUsers = `-- name: GetUsers :many
SELECT name, code FROM resident
`

func (q *Queries) GetUsers(ctx context.Context) ([]Resident, error) {
	rows, err := q.query(ctx, q.getUsersStmt, getUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Resident{}
	for rows.Next() {
		var i Resident
		if err := rows.Scan(&i.Name, &i.Code); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE resident
SET
    name = COALESCE($1, "name"),
    code = COALESCE($2, code)
WHERE name = $1
RETURNING name, code
`

type UpdateUserParams struct {
	Name null.String `json:"name"`
	Code null.String `json:"code"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (Resident, error) {
	row := q.queryRow(ctx, q.updateUserStmt, updateUser, arg.Name, arg.Code)
	var i Resident
	err := row.Scan(&i.Name, &i.Code)
	return i, err
}
