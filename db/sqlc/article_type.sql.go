// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: article_type.sql

package db

import (
	"context"

	"github.com/google/uuid"
	null "github.com/guregu/null/v5"
)

const createArticleType = `-- name: CreateArticleType :one
INSERT INTO article_type (
    "name",
    "desc",
    "icon_codepoint",
    color
) VALUES (
    $1, $2, $3, $4
) RETURNING uuid, name, "desc", icon_codepoint, color
`

type CreateArticleTypeParams struct {
	Name          string      `json:"name"`
	Desc          null.String `json:"desc"`
	IconCodepoint int32       `json:"icon_codepoint"`
	Color         string      `json:"color"`
}

func (q *Queries) CreateArticleType(ctx context.Context, arg CreateArticleTypeParams) (ArticleType, error) {
	row := q.queryRow(ctx, q.createArticleTypeStmt, createArticleType,
		arg.Name,
		arg.Desc,
		arg.IconCodepoint,
		arg.Color,
	)
	var i ArticleType
	err := row.Scan(
		&i.Uuid,
		&i.Name,
		&i.Desc,
		&i.IconCodepoint,
		&i.Color,
	)
	return i, err
}

const deleteArticleType = `-- name: DeleteArticleType :exec
DELETE FROM article_type
WHERE uuid = $1
`

func (q *Queries) DeleteArticleType(ctx context.Context, argUuid uuid.UUID) error {
	_, err := q.exec(ctx, q.deleteArticleTypeStmt, deleteArticleType, argUuid)
	return err
}

const getArticleTypeById = `-- name: GetArticleTypeById :one
SELECT uuid, name, "desc", icon_codepoint, color FROM article_type
WHERE uuid = $1 LIMIT 1
`

func (q *Queries) GetArticleTypeById(ctx context.Context, argUuid uuid.UUID) (ArticleType, error) {
	row := q.queryRow(ctx, q.getArticleTypeByIdStmt, getArticleTypeById, argUuid)
	var i ArticleType
	err := row.Scan(
		&i.Uuid,
		&i.Name,
		&i.Desc,
		&i.IconCodepoint,
		&i.Color,
	)
	return i, err
}

const getArticleTypes = `-- name: GetArticleTypes :many
SELECT uuid, name, "desc", icon_codepoint, color FROM article_type
`

func (q *Queries) GetArticleTypes(ctx context.Context) ([]ArticleType, error) {
	rows, err := q.query(ctx, q.getArticleTypesStmt, getArticleTypes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ArticleType{}
	for rows.Next() {
		var i ArticleType
		if err := rows.Scan(
			&i.Uuid,
			&i.Name,
			&i.Desc,
			&i.IconCodepoint,
			&i.Color,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getArticleTypesWithArticles = `-- name: GetArticleTypesWithArticles :many
select article_type.uuid, article_type.name, article_type."desc", article_type.icon_codepoint, article_type.color, article.uuid, article.name, article."desc", article.purchase_price, article.resell_price, article.article_type_uuid from article_type left join article on article.article_type_uuid = article_type.uuid
`

type GetArticleTypesWithArticlesRow struct {
	ArticleType     ArticleType   `json:"article_type"`
	Uuid            uuid.NullUUID `json:"uuid"`
	Name            null.String   `json:"name"`
	Desc            null.String   `json:"desc"`
	PurchasePrice   null.Float    `json:"purchase_price"`
	ResellPrice     null.Float    `json:"resell_price"`
	ArticleTypeUuid uuid.NullUUID `json:"article_type_uuid"`
}

func (q *Queries) GetArticleTypesWithArticles(ctx context.Context) ([]GetArticleTypesWithArticlesRow, error) {
	rows, err := q.query(ctx, q.getArticleTypesWithArticlesStmt, getArticleTypesWithArticles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetArticleTypesWithArticlesRow{}
	for rows.Next() {
		var i GetArticleTypesWithArticlesRow
		if err := rows.Scan(
			&i.ArticleType.Uuid,
			&i.ArticleType.Name,
			&i.ArticleType.Desc,
			&i.ArticleType.IconCodepoint,
			&i.ArticleType.Color,
			&i.Uuid,
			&i.Name,
			&i.Desc,
			&i.PurchasePrice,
			&i.ResellPrice,
			&i.ArticleTypeUuid,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateArticleType = `-- name: UpdateArticleType :one
UPDATE article_type
SET
    "name" = COALESCE($1, "name"),
    "desc" = COALESCE($2, "desc"),
    "icon_codepoint" = COALESCE($3, "icon_codepoint"),
    "color" = COALESCE($4, "color")
WHERE uuid = $5
RETURNING uuid, name, "desc", icon_codepoint, color
`

type UpdateArticleTypeParams struct {
	Name          null.String `json:"name"`
	Desc          null.String `json:"desc"`
	IconCodepoint null.Int32  `json:"icon_codepoint"`
	Color         null.String `json:"color"`
	Uuid          uuid.UUID   `json:"uuid"`
}

func (q *Queries) UpdateArticleType(ctx context.Context, arg UpdateArticleTypeParams) (ArticleType, error) {
	row := q.queryRow(ctx, q.updateArticleTypeStmt, updateArticleType,
		arg.Name,
		arg.Desc,
		arg.IconCodepoint,
		arg.Color,
		arg.Uuid,
	)
	var i ArticleType
	err := row.Scan(
		&i.Uuid,
		&i.Name,
		&i.Desc,
		&i.IconCodepoint,
		&i.Color,
	)
	return i, err
}
