// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: event.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
	null "github.com/guregu/null/v5"
)

const createEvent = `-- name: CreateEvent :one
INSERT INTO event (
    "name",
    "desc",
    from_date,
    to_date
) VALUES (
    $1, $2, $3, $4
) RETURNING uuid, name, "desc", from_date, to_date
`

type CreateEventParams struct {
	Name     string      `json:"name"`
	Desc     null.String `json:"desc"`
	FromDate time.Time   `json:"from_date"`
	ToDate   time.Time   `json:"to_date"`
}

func (q *Queries) CreateEvent(ctx context.Context, arg CreateEventParams) (Event, error) {
	row := q.queryRow(ctx, q.createEventStmt, createEvent,
		arg.Name,
		arg.Desc,
		arg.FromDate,
		arg.ToDate,
	)
	var i Event
	err := row.Scan(
		&i.Uuid,
		&i.Name,
		&i.Desc,
		&i.FromDate,
		&i.ToDate,
	)
	return i, err
}

const deleteEvent = `-- name: DeleteEvent :exec
DELETE FROM event
WHERE uuid = $1
`

func (q *Queries) DeleteEvent(ctx context.Context, argUuid uuid.UUID) error {
	_, err := q.exec(ctx, q.deleteEventStmt, deleteEvent, argUuid)
	return err
}

const getEventById = `-- name: GetEventById :one
SELECT uuid, name, "desc", from_date, to_date FROM event
WHERE uuid = $1 LIMIT 1
`

func (q *Queries) GetEventById(ctx context.Context, argUuid uuid.UUID) (Event, error) {
	row := q.queryRow(ctx, q.getEventByIdStmt, getEventById, argUuid)
	var i Event
	err := row.Scan(
		&i.Uuid,
		&i.Name,
		&i.Desc,
		&i.FromDate,
		&i.ToDate,
	)
	return i, err
}

const getEvents = `-- name: GetEvents :many
SELECT uuid, name, "desc", from_date, to_date FROM event
`

func (q *Queries) GetEvents(ctx context.Context) ([]Event, error) {
	rows, err := q.query(ctx, q.getEventsStmt, getEvents)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Event{}
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.Uuid,
			&i.Name,
			&i.Desc,
			&i.FromDate,
			&i.ToDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateEvent = `-- name: UpdateEvent :one
UPDATE event
SET
    "name" = COALESCE($1, "name"),
    "desc" = COALESCE($2, "desc"),
    from_date = COALESCE($3, from_date),
    to_date = COALESCE($4, to_date)
WHERE uuid = $5
RETURNING uuid, name, "desc", from_date, to_date
`

type UpdateEventParams struct {
	Name     null.String `json:"name"`
	Desc     null.String `json:"desc"`
	FromDate null.Time   `json:"from_date"`
	ToDate   null.Time   `json:"to_date"`
	Uuid     uuid.UUID   `json:"uuid"`
}

func (q *Queries) UpdateEvent(ctx context.Context, arg UpdateEventParams) (Event, error) {
	row := q.queryRow(ctx, q.updateEventStmt, updateEvent,
		arg.Name,
		arg.Desc,
		arg.FromDate,
		arg.ToDate,
		arg.Uuid,
	)
	var i Event
	err := row.Scan(
		&i.Uuid,
		&i.Name,
		&i.Desc,
		&i.FromDate,
		&i.ToDate,
	)
	return i, err
}
