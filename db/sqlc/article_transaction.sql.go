// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: article_transaction.sql

package db

import (
	"context"

	"github.com/google/uuid"
	null "github.com/guregu/null/v5"
)

const createArticleTransaction = `-- name: CreateArticleTransaction :one
INSERT INTO article_transaction (
    article_uuid,
    transaction_uuid,
    amount,
    price
) VALUES (
    $1, $2, $3, $4
) RETURNING uuid, article_uuid, transaction_uuid, amount, price
`

type CreateArticleTransactionParams struct {
	ArticleUuid     uuid.UUID `json:"article_uuid"`
	TransactionUuid uuid.UUID `json:"transaction_uuid"`
	Amount          int32     `json:"amount"`
	Price           float64   `json:"price"`
}

func (q *Queries) CreateArticleTransaction(ctx context.Context, arg CreateArticleTransactionParams) (ArticleTransaction, error) {
	row := q.queryRow(ctx, q.createArticleTransactionStmt, createArticleTransaction,
		arg.ArticleUuid,
		arg.TransactionUuid,
		arg.Amount,
		arg.Price,
	)
	var i ArticleTransaction
	err := row.Scan(
		&i.Uuid,
		&i.ArticleUuid,
		&i.TransactionUuid,
		&i.Amount,
		&i.Price,
	)
	return i, err
}

const deleteArticleTransaction = `-- name: DeleteArticleTransaction :exec
DELETE FROM article_transaction
WHERE uuid = $1
`

func (q *Queries) DeleteArticleTransaction(ctx context.Context, argUuid uuid.UUID) error {
	_, err := q.exec(ctx, q.deleteArticleTransactionStmt, deleteArticleTransaction, argUuid)
	return err
}

const getArticleTransactionById = `-- name: GetArticleTransactionById :one
SELECT uuid, article_uuid, transaction_uuid, amount, price FROM article_transaction
WHERE uuid = $1 LIMIT 1
`

func (q *Queries) GetArticleTransactionById(ctx context.Context, argUuid uuid.UUID) (ArticleTransaction, error) {
	row := q.queryRow(ctx, q.getArticleTransactionByIdStmt, getArticleTransactionById, argUuid)
	var i ArticleTransaction
	err := row.Scan(
		&i.Uuid,
		&i.ArticleUuid,
		&i.TransactionUuid,
		&i.Amount,
		&i.Price,
	)
	return i, err
}

const getArticleTransactions = `-- name: GetArticleTransactions :many
SELECT uuid, article_uuid, transaction_uuid, amount, price FROM article_transaction
`

func (q *Queries) GetArticleTransactions(ctx context.Context) ([]ArticleTransaction, error) {
	rows, err := q.query(ctx, q.getArticleTransactionsStmt, getArticleTransactions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ArticleTransaction{}
	for rows.Next() {
		var i ArticleTransaction
		if err := rows.Scan(
			&i.Uuid,
			&i.ArticleUuid,
			&i.TransactionUuid,
			&i.Amount,
			&i.Price,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getArticleTransactionsGroupedByArticle = `-- name: GetArticleTransactionsGroupedByArticle :many
select article_uuid, sum(amount) as amount from article_transaction
group by article_uuid
`

type GetArticleTransactionsGroupedByArticleRow struct {
	ArticleUuid uuid.UUID `json:"article_uuid"`
	Amount      int64     `json:"amount"`
}

func (q *Queries) GetArticleTransactionsGroupedByArticle(ctx context.Context) ([]GetArticleTransactionsGroupedByArticleRow, error) {
	rows, err := q.query(ctx, q.getArticleTransactionsGroupedByArticleStmt, getArticleTransactionsGroupedByArticle)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetArticleTransactionsGroupedByArticleRow{}
	for rows.Next() {
		var i GetArticleTransactionsGroupedByArticleRow
		if err := rows.Scan(&i.ArticleUuid, &i.Amount); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateArticleTransaction = `-- name: UpdateArticleTransaction :one
UPDATE article_transaction
SET
    article_uuid = COALESCE($1, article_uuid),
    transaction_uuid = COALESCE($2, transaction_uuid),
    amount = COALESCE($3, amount),
    price = COALESCE($4, price)
WHERE uuid = $5
RETURNING uuid, article_uuid, transaction_uuid, amount, price
`

type UpdateArticleTransactionParams struct {
	ArticleUuid     uuid.NullUUID `json:"article_uuid"`
	TransactionUuid uuid.NullUUID `json:"transaction_uuid"`
	Amount          null.Int32    `json:"amount"`
	Price           null.Float    `json:"price"`
	Uuid            uuid.UUID     `json:"uuid"`
}

func (q *Queries) UpdateArticleTransaction(ctx context.Context, arg UpdateArticleTransactionParams) (ArticleTransaction, error) {
	row := q.queryRow(ctx, q.updateArticleTransactionStmt, updateArticleTransaction,
		arg.ArticleUuid,
		arg.TransactionUuid,
		arg.Amount,
		arg.Price,
		arg.Uuid,
	)
	var i ArticleTransaction
	err := row.Scan(
		&i.Uuid,
		&i.ArticleUuid,
		&i.TransactionUuid,
		&i.Amount,
		&i.Price,
	)
	return i, err
}
