// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: transaction.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
	null "github.com/guregu/null/v5"
)

const createTransaction = `-- name: CreateTransaction :one
INSERT INTO transaction (
    "date",
    price
) VALUES (
    $1, $2
) RETURNING uuid, date, price
`

type CreateTransactionParams struct {
	Date  time.Time `json:"date"`
	Price float64   `json:"price"`
}

func (q *Queries) CreateTransaction(ctx context.Context, arg CreateTransactionParams) (Transaction, error) {
	row := q.queryRow(ctx, q.createTransactionStmt, createTransaction, arg.Date, arg.Price)
	var i Transaction
	err := row.Scan(&i.Uuid, &i.Date, &i.Price)
	return i, err
}

const deleteTransaction = `-- name: DeleteTransaction :exec
DELETE FROM transaction
WHERE uuid = $1
`

func (q *Queries) DeleteTransaction(ctx context.Context, argUuid uuid.UUID) error {
	_, err := q.exec(ctx, q.deleteTransactionStmt, deleteTransaction, argUuid)
	return err
}

const getTransactionById = `-- name: GetTransactionById :one
SELECT uuid, date, price FROM transaction
WHERE uuid = $1 LIMIT 1
`

func (q *Queries) GetTransactionById(ctx context.Context, argUuid uuid.UUID) (Transaction, error) {
	row := q.queryRow(ctx, q.getTransactionByIdStmt, getTransactionById, argUuid)
	var i Transaction
	err := row.Scan(&i.Uuid, &i.Date, &i.Price)
	return i, err
}

const getTransactions = `-- name: GetTransactions :many
SELECT uuid, date, price FROM transaction
`

func (q *Queries) GetTransactions(ctx context.Context) ([]Transaction, error) {
	rows, err := q.query(ctx, q.getTransactionsStmt, getTransactions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Transaction{}
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(&i.Uuid, &i.Date, &i.Price); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTransaction = `-- name: UpdateTransaction :one
UPDATE transaction
SET
    "date" = COALESCE($1, "date"),
    price = COALESCE($2, price)
WHERE uuid = $3
RETURNING uuid, date, price
`

type UpdateTransactionParams struct {
	Date  null.Time  `json:"date"`
	Price null.Float `json:"price"`
	Uuid  uuid.UUID  `json:"uuid"`
}

func (q *Queries) UpdateTransaction(ctx context.Context, arg UpdateTransactionParams) (Transaction, error) {
	row := q.queryRow(ctx, q.updateTransactionStmt, updateTransaction, arg.Date, arg.Price, arg.Uuid)
	var i Transaction
	err := row.Scan(&i.Uuid, &i.Date, &i.Price)
	return i, err
}
