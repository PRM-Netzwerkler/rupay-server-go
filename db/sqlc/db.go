// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package db

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.createArticleStmt, err = db.PrepareContext(ctx, createArticle); err != nil {
		return nil, fmt.Errorf("error preparing query CreateArticle: %w", err)
	}
	if q.createArticleTransactionStmt, err = db.PrepareContext(ctx, createArticleTransaction); err != nil {
		return nil, fmt.Errorf("error preparing query CreateArticleTransaction: %w", err)
	}
	if q.createArticleTypeStmt, err = db.PrepareContext(ctx, createArticleType); err != nil {
		return nil, fmt.Errorf("error preparing query CreateArticleType: %w", err)
	}
	if q.createEventStmt, err = db.PrepareContext(ctx, createEvent); err != nil {
		return nil, fmt.Errorf("error preparing query CreateEvent: %w", err)
	}
	if q.createTransactionStmt, err = db.PrepareContext(ctx, createTransaction); err != nil {
		return nil, fmt.Errorf("error preparing query CreateTransaction: %w", err)
	}
	if q.createUserStmt, err = db.PrepareContext(ctx, createUser); err != nil {
		return nil, fmt.Errorf("error preparing query CreateUser: %w", err)
	}
	if q.deleteArticleStmt, err = db.PrepareContext(ctx, deleteArticle); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteArticle: %w", err)
	}
	if q.deleteArticleTransactionStmt, err = db.PrepareContext(ctx, deleteArticleTransaction); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteArticleTransaction: %w", err)
	}
	if q.deleteArticleTypeStmt, err = db.PrepareContext(ctx, deleteArticleType); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteArticleType: %w", err)
	}
	if q.deleteEventStmt, err = db.PrepareContext(ctx, deleteEvent); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteEvent: %w", err)
	}
	if q.deleteTransactionStmt, err = db.PrepareContext(ctx, deleteTransaction); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteTransaction: %w", err)
	}
	if q.deleteUserStmt, err = db.PrepareContext(ctx, deleteUser); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteUser: %w", err)
	}
	if q.getArticleByIdStmt, err = db.PrepareContext(ctx, getArticleById); err != nil {
		return nil, fmt.Errorf("error preparing query GetArticleById: %w", err)
	}
	if q.getArticleTransactionByIdStmt, err = db.PrepareContext(ctx, getArticleTransactionById); err != nil {
		return nil, fmt.Errorf("error preparing query GetArticleTransactionById: %w", err)
	}
	if q.getArticleTransactionsStmt, err = db.PrepareContext(ctx, getArticleTransactions); err != nil {
		return nil, fmt.Errorf("error preparing query GetArticleTransactions: %w", err)
	}
	if q.getArticleTransactionsGroupedByArticleStmt, err = db.PrepareContext(ctx, getArticleTransactionsGroupedByArticle); err != nil {
		return nil, fmt.Errorf("error preparing query GetArticleTransactionsGroupedByArticle: %w", err)
	}
	if q.getArticleTypeByIdStmt, err = db.PrepareContext(ctx, getArticleTypeById); err != nil {
		return nil, fmt.Errorf("error preparing query GetArticleTypeById: %w", err)
	}
	if q.getArticleTypesStmt, err = db.PrepareContext(ctx, getArticleTypes); err != nil {
		return nil, fmt.Errorf("error preparing query GetArticleTypes: %w", err)
	}
	if q.getArticleTypesWithArticlesStmt, err = db.PrepareContext(ctx, getArticleTypesWithArticles); err != nil {
		return nil, fmt.Errorf("error preparing query GetArticleTypesWithArticles: %w", err)
	}
	if q.getArticlesStmt, err = db.PrepareContext(ctx, getArticles); err != nil {
		return nil, fmt.Errorf("error preparing query GetArticles: %w", err)
	}
	if q.getEventByIdStmt, err = db.PrepareContext(ctx, getEventById); err != nil {
		return nil, fmt.Errorf("error preparing query GetEventById: %w", err)
	}
	if q.getEventsStmt, err = db.PrepareContext(ctx, getEvents); err != nil {
		return nil, fmt.Errorf("error preparing query GetEvents: %w", err)
	}
	if q.getTransactionByIdStmt, err = db.PrepareContext(ctx, getTransactionById); err != nil {
		return nil, fmt.Errorf("error preparing query GetTransactionById: %w", err)
	}
	if q.getTransactionsStmt, err = db.PrepareContext(ctx, getTransactions); err != nil {
		return nil, fmt.Errorf("error preparing query GetTransactions: %w", err)
	}
	if q.getUserByCodeStmt, err = db.PrepareContext(ctx, getUserByCode); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserByCode: %w", err)
	}
	if q.getUserByIdStmt, err = db.PrepareContext(ctx, getUserById); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserById: %w", err)
	}
	if q.getUsersStmt, err = db.PrepareContext(ctx, getUsers); err != nil {
		return nil, fmt.Errorf("error preparing query GetUsers: %w", err)
	}
	if q.updateArticleStmt, err = db.PrepareContext(ctx, updateArticle); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateArticle: %w", err)
	}
	if q.updateArticleTransactionStmt, err = db.PrepareContext(ctx, updateArticleTransaction); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateArticleTransaction: %w", err)
	}
	if q.updateArticleTypeStmt, err = db.PrepareContext(ctx, updateArticleType); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateArticleType: %w", err)
	}
	if q.updateEventStmt, err = db.PrepareContext(ctx, updateEvent); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateEvent: %w", err)
	}
	if q.updateTransactionStmt, err = db.PrepareContext(ctx, updateTransaction); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateTransaction: %w", err)
	}
	if q.updateUserStmt, err = db.PrepareContext(ctx, updateUser); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateUser: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.createArticleStmt != nil {
		if cerr := q.createArticleStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createArticleStmt: %w", cerr)
		}
	}
	if q.createArticleTransactionStmt != nil {
		if cerr := q.createArticleTransactionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createArticleTransactionStmt: %w", cerr)
		}
	}
	if q.createArticleTypeStmt != nil {
		if cerr := q.createArticleTypeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createArticleTypeStmt: %w", cerr)
		}
	}
	if q.createEventStmt != nil {
		if cerr := q.createEventStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createEventStmt: %w", cerr)
		}
	}
	if q.createTransactionStmt != nil {
		if cerr := q.createTransactionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createTransactionStmt: %w", cerr)
		}
	}
	if q.createUserStmt != nil {
		if cerr := q.createUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createUserStmt: %w", cerr)
		}
	}
	if q.deleteArticleStmt != nil {
		if cerr := q.deleteArticleStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteArticleStmt: %w", cerr)
		}
	}
	if q.deleteArticleTransactionStmt != nil {
		if cerr := q.deleteArticleTransactionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteArticleTransactionStmt: %w", cerr)
		}
	}
	if q.deleteArticleTypeStmt != nil {
		if cerr := q.deleteArticleTypeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteArticleTypeStmt: %w", cerr)
		}
	}
	if q.deleteEventStmt != nil {
		if cerr := q.deleteEventStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteEventStmt: %w", cerr)
		}
	}
	if q.deleteTransactionStmt != nil {
		if cerr := q.deleteTransactionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteTransactionStmt: %w", cerr)
		}
	}
	if q.deleteUserStmt != nil {
		if cerr := q.deleteUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteUserStmt: %w", cerr)
		}
	}
	if q.getArticleByIdStmt != nil {
		if cerr := q.getArticleByIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getArticleByIdStmt: %w", cerr)
		}
	}
	if q.getArticleTransactionByIdStmt != nil {
		if cerr := q.getArticleTransactionByIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getArticleTransactionByIdStmt: %w", cerr)
		}
	}
	if q.getArticleTransactionsStmt != nil {
		if cerr := q.getArticleTransactionsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getArticleTransactionsStmt: %w", cerr)
		}
	}
	if q.getArticleTransactionsGroupedByArticleStmt != nil {
		if cerr := q.getArticleTransactionsGroupedByArticleStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getArticleTransactionsGroupedByArticleStmt: %w", cerr)
		}
	}
	if q.getArticleTypeByIdStmt != nil {
		if cerr := q.getArticleTypeByIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getArticleTypeByIdStmt: %w", cerr)
		}
	}
	if q.getArticleTypesStmt != nil {
		if cerr := q.getArticleTypesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getArticleTypesStmt: %w", cerr)
		}
	}
	if q.getArticleTypesWithArticlesStmt != nil {
		if cerr := q.getArticleTypesWithArticlesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getArticleTypesWithArticlesStmt: %w", cerr)
		}
	}
	if q.getArticlesStmt != nil {
		if cerr := q.getArticlesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getArticlesStmt: %w", cerr)
		}
	}
	if q.getEventByIdStmt != nil {
		if cerr := q.getEventByIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getEventByIdStmt: %w", cerr)
		}
	}
	if q.getEventsStmt != nil {
		if cerr := q.getEventsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getEventsStmt: %w", cerr)
		}
	}
	if q.getTransactionByIdStmt != nil {
		if cerr := q.getTransactionByIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTransactionByIdStmt: %w", cerr)
		}
	}
	if q.getTransactionsStmt != nil {
		if cerr := q.getTransactionsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTransactionsStmt: %w", cerr)
		}
	}
	if q.getUserByCodeStmt != nil {
		if cerr := q.getUserByCodeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByCodeStmt: %w", cerr)
		}
	}
	if q.getUserByIdStmt != nil {
		if cerr := q.getUserByIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByIdStmt: %w", cerr)
		}
	}
	if q.getUsersStmt != nil {
		if cerr := q.getUsersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUsersStmt: %w", cerr)
		}
	}
	if q.updateArticleStmt != nil {
		if cerr := q.updateArticleStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateArticleStmt: %w", cerr)
		}
	}
	if q.updateArticleTransactionStmt != nil {
		if cerr := q.updateArticleTransactionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateArticleTransactionStmt: %w", cerr)
		}
	}
	if q.updateArticleTypeStmt != nil {
		if cerr := q.updateArticleTypeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateArticleTypeStmt: %w", cerr)
		}
	}
	if q.updateEventStmt != nil {
		if cerr := q.updateEventStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateEventStmt: %w", cerr)
		}
	}
	if q.updateTransactionStmt != nil {
		if cerr := q.updateTransactionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateTransactionStmt: %w", cerr)
		}
	}
	if q.updateUserStmt != nil {
		if cerr := q.updateUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateUserStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                                         DBTX
	tx                                         *sql.Tx
	createArticleStmt                          *sql.Stmt
	createArticleTransactionStmt               *sql.Stmt
	createArticleTypeStmt                      *sql.Stmt
	createEventStmt                            *sql.Stmt
	createTransactionStmt                      *sql.Stmt
	createUserStmt                             *sql.Stmt
	deleteArticleStmt                          *sql.Stmt
	deleteArticleTransactionStmt               *sql.Stmt
	deleteArticleTypeStmt                      *sql.Stmt
	deleteEventStmt                            *sql.Stmt
	deleteTransactionStmt                      *sql.Stmt
	deleteUserStmt                             *sql.Stmt
	getArticleByIdStmt                         *sql.Stmt
	getArticleTransactionByIdStmt              *sql.Stmt
	getArticleTransactionsStmt                 *sql.Stmt
	getArticleTransactionsGroupedByArticleStmt *sql.Stmt
	getArticleTypeByIdStmt                     *sql.Stmt
	getArticleTypesStmt                        *sql.Stmt
	getArticleTypesWithArticlesStmt            *sql.Stmt
	getArticlesStmt                            *sql.Stmt
	getEventByIdStmt                           *sql.Stmt
	getEventsStmt                              *sql.Stmt
	getTransactionByIdStmt                     *sql.Stmt
	getTransactionsStmt                        *sql.Stmt
	getUserByCodeStmt                          *sql.Stmt
	getUserByIdStmt                            *sql.Stmt
	getUsersStmt                               *sql.Stmt
	updateArticleStmt                          *sql.Stmt
	updateArticleTransactionStmt               *sql.Stmt
	updateArticleTypeStmt                      *sql.Stmt
	updateEventStmt                            *sql.Stmt
	updateTransactionStmt                      *sql.Stmt
	updateUserStmt                             *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                            tx,
		tx:                            tx,
		createArticleStmt:             q.createArticleStmt,
		createArticleTransactionStmt:  q.createArticleTransactionStmt,
		createArticleTypeStmt:         q.createArticleTypeStmt,
		createEventStmt:               q.createEventStmt,
		createTransactionStmt:         q.createTransactionStmt,
		createUserStmt:                q.createUserStmt,
		deleteArticleStmt:             q.deleteArticleStmt,
		deleteArticleTransactionStmt:  q.deleteArticleTransactionStmt,
		deleteArticleTypeStmt:         q.deleteArticleTypeStmt,
		deleteEventStmt:               q.deleteEventStmt,
		deleteTransactionStmt:         q.deleteTransactionStmt,
		deleteUserStmt:                q.deleteUserStmt,
		getArticleByIdStmt:            q.getArticleByIdStmt,
		getArticleTransactionByIdStmt: q.getArticleTransactionByIdStmt,
		getArticleTransactionsStmt:    q.getArticleTransactionsStmt,
		getArticleTransactionsGroupedByArticleStmt: q.getArticleTransactionsGroupedByArticleStmt,
		getArticleTypeByIdStmt:                     q.getArticleTypeByIdStmt,
		getArticleTypesStmt:                        q.getArticleTypesStmt,
		getArticleTypesWithArticlesStmt:            q.getArticleTypesWithArticlesStmt,
		getArticlesStmt:                            q.getArticlesStmt,
		getEventByIdStmt:                           q.getEventByIdStmt,
		getEventsStmt:                              q.getEventsStmt,
		getTransactionByIdStmt:                     q.getTransactionByIdStmt,
		getTransactionsStmt:                        q.getTransactionsStmt,
		getUserByCodeStmt:                          q.getUserByCodeStmt,
		getUserByIdStmt:                            q.getUserByIdStmt,
		getUsersStmt:                               q.getUsersStmt,
		updateArticleStmt:                          q.updateArticleStmt,
		updateArticleTransactionStmt:               q.updateArticleTransactionStmt,
		updateArticleTypeStmt:                      q.updateArticleTypeStmt,
		updateEventStmt:                            q.updateEventStmt,
		updateTransactionStmt:                      q.updateTransactionStmt,
		updateUserStmt:                             q.updateUserStmt,
	}
}
